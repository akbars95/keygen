/*DROP DATABASE IF EXISTS keygen;

CREATE DATABASE keygen;


USE keygen;
*/
/*tables*/
CREATE TABLE users (
  user_id                INTEGER GENERATED BY DEFAULT AS IDENTITY ( START WITH 1, INCREMENT BY 1) NOT NULL /*PRIMARY KEY*/,
  user_email             VARCHAR(128)        NOT NULL,
  user_created_date_time DATETIME            NOT NULL,
  user_enabled           TINYINT DEFAULT '1' NOT NULL,
  user_username          VARCHAR(50)         NOT NULL,
  user_password          VARCHAR(255)        NOT NULL,
  CONSTRAINT primaryKey PRIMARY KEY (user_id),
  CONSTRAINT user_email_UNIQUE UNIQUE (user_email)
);

CREATE TABLE statuses (
  status_id    VARCHAR(45) NOT NULL,
  status_value VARCHAR(45) NOT NULL,
  status_stage INTEGER     NOT NULL,
  CONSTRAINT primaryKeystatus_id PRIMARY KEY (status_id),
  CONSTRAINT status_value_UNIQUE UNIQUE (status_value)
);

CREATE TABLE user_requests (
  user_request_id   INTEGER GENERATED BY DEFAULT AS IDENTITY ( START WITH 1, INCREMENT BY 1) NOT NULL PRIMARY KEY,
  user_id           INTEGER     NOT NULL,
  request_date_time DATETIME    NOT NULL,
  request_is_active TINYINT     NOT NULL,
  temp_url          VARCHAR(500) DEFAULT NULL,
  temp_password     VARCHAR(255) DEFAULT NULL,
  request_status    VARCHAR(45) NOT NULL
);

ALTER TABLE user_requests
  ADD FOREIGN KEY (request_status) REFERENCES statuses (status_id);
ALTER TABLE user_requests
  ADD FOREIGN KEY (user_id) REFERENCES users (user_id);

CREATE TABLE user_keys (
  user_request_id    INTEGER      NOT NULL,
  generated_key      VARCHAR(100) NOT NULL,
  generated_datetime DATETIME     NOT NULL
);


/*triggers*/
CREATE TRIGGER statuses_BEFORE_INSERT BEFORE INSERT ON statuses REFERENCING NEW ROW AS NEW FOR EACH ROW SET NEW.status_id = UUID();